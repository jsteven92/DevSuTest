package com.devsu.bank.usecase;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Component;

import com.devsu.bank.domain.model.Account;
import com.devsu.bank.domain.model.Movement;
import com.devsu.bank.domain.model.repository.MovementRepositoryPort;
import com.devsu.bank.infraestructure.exception.InsufficientBalanceException;
import com.devsu.bank.infraestructure.exception.LocalNotFoundException;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Component
public class MovementInteractorImpl implements IMovementInterator {

	private final AccountInteractorImpl accountInteractorImpl;
	private final MovementRepositoryPort movementRepositoryPort;

	@Override
	public Optional<Movement> findMovById(Long id) {
		return movementRepositoryPort.findMovementById(id);
	}

	@Override
	public Movement saveMov(Movement movement) {
		Account account = validAccount(movement.getAccount().getAccountId());
		
		movement.setAccount(account);
		
		processMovement(account ,movement);
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
		String dateString = LocalDateTime.now().format(formatter);
		movement.setMoventDate(dateString);

		movement.setBalance(accountInteractorImpl.updateBalance(account));

		return movementRepositoryPort.saveMovement(movement);
	}

	public void processMovement(Account account, Movement movement) {

		switch (movement.getType()) {
		case TRANSFER_SAME_BANK:
		case TRANSFER_OTHER_BANK:
			if (account.getBalance().compareTo(movement.getAmount()) < 0) {
				throw new InsufficientBalanceException("Saldo no disponible");
			}

			account.setBalance(account.getBalance().subtract(movement.getAmount()));

			break;
		case DEPOSIT:
			account.setBalance(account.getBalance().add(movement.getAmount()));
			break;

		}

	}

	public Account validAccount(Long accondId) {
		return accountInteractorImpl.findAccountById(accondId)
				.orElseThrow(() -> new LocalNotFoundException(
						"Account with Id " + accondId + " not found"));
		
	}
	
	@Override
	public List<Movement> findMovementByAccountId(Long accoundId) {
		
		return null;
	}
}
