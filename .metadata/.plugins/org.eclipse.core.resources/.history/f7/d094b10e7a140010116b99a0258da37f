package com.devsu.bank.infraestructure.exception;



import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;

import com.devsu.bank.infraestructure.exception.dto.ErrorMessage;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@ControllerAdvice
public class RestResponseEntityExceptionHandler {
	
	@ExceptionHandler(LocalNotFoundException.class)
	@ResponseBody
	public ResponseEntity<ErrorMessage> localNotFoundException(LocalNotFoundException exception){
		ErrorMessage message = new ErrorMessage(HttpStatus.NOT_FOUND, exception.getMessage());
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(message);
	}
	
	@ExceptionHandler(Exception.class)
	@ResponseBody
	public ResponseEntity<ErrorMessage> GeneralExcepcion(Exception ex) {
		
		log.error( "Error", ex);
		ErrorMessage message = new ErrorMessage(HttpStatus.NOT_FOUND, "Internal Error");
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(message);
    }
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<Object> handleValidationExceptions(MethodArgumentNotValidException ex) {
	    log.warn("Validations errors: {}", ex.getMessage());

	    
	    List<String> errores = ex.getBindingResult()
	        .getFieldErrors()
	        .stream()
	        .map(error -> error.getField() + ": " + error.getDefaultMessage())
	        .toList();

	    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errores);
	}
	
	@ExceptionHandler(HttpMessageNotReadableException.class)
	public ResponseEntity<Object> handleInvalidJson(HttpMessageNotReadableException ex) {
	    log.warn("Format invalid", ex.getMessage());

	    String mensaje = "All entries verified, there is invalid data";

	    return new ResponseEntity<>(mensaje, HttpStatus.BAD_REQUEST);
	}
}
