package com.devsu.bank.usecase;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.devsu.bank.domain.model.Account;
import com.devsu.bank.domain.model.repository.RepositoryPort;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;

@Service
public class AccountInteractorImpl implements IAccountInteractor, IGenericIteractor<Account> {
	

	private RepositoryPort<Account> port;
	
	public AccountInteractorImpl(RepositoryPort<Account> port) {
		this.port = port;
	}
	
	@Override
	public Optional<Account> findObjectById(Long id) {
		return port.findObjectById(id);
	}

	@Override
	public Account saveObject(Account account) {
		account.setBalance(account.getInicialBalance());
		return port.saveObject(account);
	}

	@Override
	public Optional<Account> updateObject(Long id, Account accountNew) throws Exception {
		
		if(accountNew.getMovementList().size() > 0) {
			throw new Exception("Invalid Data");
		}
		
		Account accountAct = port.findObjectById(id)
				.orElseThrow(() -> new EntityNotFoundException("Account with Id " + id +" not found"));
		
		if(accountAct.getAccountId() == id) {
			accountNew.setBalance(accountAct.getBalance());
			accountNew.setMovementList(null);
			
			return Optional.of(port.saveObject(accountNew));
		}
		
		return Optional.empty();
	}

	@Override
	public double updateBalance(Long accountId, double value) {
		Account account = port.findObjectById(accountId)
				.orElseThrow(() -> new EntityNotFoundException("Account with Id " + accountId +" not found"));
		
		account.setBalance(account.getBalance() + value);
		
		port.saveObject(account);
		return account.getBalance();
	}

}
